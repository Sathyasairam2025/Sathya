
 StreamBasis



/*import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class StreamBasis {

	public static void main(String[] args) {
		//List<Integer> l1=new LinkedList<Integer>();
		Stream<Integer> stream=Stream.of(10,20,30,40,50);//stream
		System.out.println(stream.count());
		
		Integer[] values=new Integer[] { 10, 20, 30, 13, 10, 11, 12, 13 };//array
		stream=Arrays.stream(values);
System.out.println(Arrays.toString(values));
		//for(m=0;m<n;m++)
		//num=m*m
		//sop(num)
		stream=stream.map(m->m*m);
		stream.forEach(System.out::println);//method reference
		
		// limit 
				System.out.println("First 2 elements are : ");
				Arrays.stream(values).limit(2).forEach(System.out::println);

				// skip 
				System.out.println("Elements excepts first 4 : ");
				Arrays.stream(values).skip(4).forEach(System.out::println);

				// distinct
// distinct 
				System.out.println("Distinct Elements are : ");
				Arrays.stream(values).distinct().forEach(System.out::println);
				
				
				List<String> words = Arrays.asList("Hello", "Stream", "Learning");
				//words.add("In Java"); Immutable list
				
				// creating a stream from a List
				Stream<String> stream1 = words.stream();

				// map
				System.out.println("Strings in uppercase : ");
				List<String> s1 = stream1.map(str -> str.toUpperCase()).collect(Collectors.toList());
System.out.println(s1);
				
				stream1 = words.stream();
				stream1.map(str->str.toLowerCase()).forEach(System.out::println);
				System.out.println(words);//list
	}

}//




 ReduceDemo

//import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.stream.Stream;

public class ReduceDemo {

	public static void main(String[] args) {
		List<Integer> intList = Arrays.asList(1, 12, -3, 4, 15, -6, 7, 8);

		// retrieve the stream
		Stream<Integer> stream = intList.stream();

		// Filtered Stream of Positive numbers
		stream = stream.filter((a) -> a > 0);
		stream.forEach(System.out::println);

		stream = intList.stream().filter((a) -> a > 0);
// stream=Stream.of();
		// reduce to return maximum number
		Optional<Integer> result = stream.reduce((a, b) -> a > b ? a : b);

		if (result.isPresent())
			System.out.println("Maximum element is : " + result.get());
		else
			System.out.println("Stream is empty for given operation");

		// Filtered Stream of Positive numbers
		stream = intList.stream().filter((a) -> a > 0);

		// reduce to sum of all positive numbers
		result = stream.reduce((a, b) -> a + b);
if (result.isPresent()) 
			System.out.println("sum of all positive elements is : " + result.get());
		else
			System.out.println("Stream is empty for given operation");

		// Filtered Stream of even numbers
		stream = intList.stream().filter((a) -> a % 2 == 0);//1,2,3,4(2,4)

		// reduce to sum of even numbers
		result = stream.reduce((a, b) -> a + b);//6
		if (result.isPresent()) 
			System.out.println("sum of all even elements is : " + result.get());
		else
			System.out.println("Stream is empty for given operation");
	}

}//
